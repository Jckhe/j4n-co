dC = {};
dC.acceptTransferWithID_index_ = function(id, index) { alert("Cocoa: accept transfer\ndC.acceptTransferWithID_index_(id, index)"); return true; };
dC.cancelTransferWithID_index_ = function(id, index) { alert("Cocoa: cancel/decline transfer\ndC.cancelTransferWithID_index_(id, index)"); return true; };
dC.showTransferInQuickLookWithID_index_ = function(id, index) { alert("Cocoa: show files with Quicklook\ndC.showTransferInQuickLookWithID_index_(id, index)"); return true; };
dC.revealTransferInFinderWithID_index_ = function(id, index) { alert("Cocoa: reveal files in Finder\ndC.revealTransferInFinderWithID_index_(id, index)"); return true; };
dC.doubleClickIconWithID_index_ = function(id, index) { alert("Cocoa: double click on the file transfer icon. \ndC.doubleClickIconWithID_index_(id, index)"); return true; };
dC.playVoicemailWithID_ = function(id) { alert("Cocoa: start playing a Voicemail\ndC.playVoicemailWithID_(id)"); return true; };
dC.stopVoicemailWithID_ = function(id) { alert("Cocoa: stop playing a Voicemail\ndC.stopVoicemailWithID_(id)"); return true; };
dC.deleteVoicemailWithID_ = function(id) { alert("Cocoa: delete a Voicemail\ndC.deleteVoicemailWithID_(id)"); return true; };
dC.openConversationWithIdentity_ = function(identity) { alert("Cocoa: start a 1:1 conversation with target user\ndC.openConversationWithIdentity_(identity)"); return true; };
dC.showProfileOfIdentity_ = function(identity) { alert("Cocoa: show user profile \ndC.showProfileOfIdentity_(identity)"); return true; };
dC.startMessageEditWithID_ = function(id) { alert("Cocoa: start editing this messsage\ndC.startMessageEditWithID_(id)"); return true; };
dC.removeMessageWithID_ = function(id) { alert("Cocoa: set the message contents to empty\ndC.removeMessageWithID_(id)"); return true; };
dC.loadHistoryInDays_ = function(days) { alert("Cocoa: load history for "+days+" day(s).\nIf 0, then load latest X number of messages.\ndC.loadHistoryInDays_(days)"); return true; };
dC.isMessageEditable_ = function(id) { console.log("Cocoa: Check from SkyLib if message is editable.\ndC.isMessageEditable_(id)"); return true; };
dC.isMessageEditableInline_ = function(id) { console.log("Cocoa: Check from SkyLib if message is editable inline.\ndC.isMessageEditableInline_(id)"); return true; };
dC.scrollWindowToTopEvent = function() { console.log("Cocoa: When window is scrolled to top, send event to Cocoa.\n\ndC.scrollWindowToTopEvent()"); return true; };
dC.startMessageInlineEditWithID_body_ = function(id, body) { console.log("Cocoa: notify cocoa that the inline editing of a message has started.\n\ndC.startMessageInlineEditWithID_body_(id, body)"); return true; };
dC.cancelMessageInlineEditWithID_ = function(id) { console.log("Cocoa: cancel a message inline edit and return the default contents.\n\ndC.cancelMessageInlineEditWithID_(id)"); return true; };
dC.stopMessageInlineEditAndSaveWithID_body_ = function(id, body) { console.log("Cocoa: notify cocoa that the inline editing of a message has ended and user wishes to save the message.\n\ndC.stopMessageInlineEditAndSaveWithID_body_(id, body)"); return true; };
dC.showContextMenuForID_ = function(id) { alert("Cocoa: ask cocoa to open context menu for item.\n\ndC.showContextMenuForID_(id)"); return true; };
dC.setMode_leftMargin_rightMargin_ = function(mode, left, right) { console.log("Cocoa: notify cocoa that chatmode has changed.\n\ndC.setMode_leftMargin_rightMargin_(mode, left, right)"); return true; };
debug = true;