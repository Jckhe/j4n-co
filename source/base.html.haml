%h1 Testing display of HTML elements
%h2 This is 2nd level heading
%p This is a test paragraph.
%h3 This is 3rd level heading
%p This is a test paragraph.
%h4 This is 4th level heading
%p This is a test paragraph.
%h5 This is 5th level heading
%p This is a test paragraph.
%h6 This is 6th level heading
%p This is a test paragraph.
%h2 Basic block level elements
%p
  This is a normal paragraph (
  %code p
  element).
  To add some length to it, let us mention that this page was
  primarily written for testing the effect of
  = succeed "." do
    %strong user style sheets
  You can use it for various other purposes as well, like just checking how
  your browser displays various HTML elements.
%p
  This is another paragraph. I think it needs to be added that
  the set of elements tested is not exhaustive in any sense. I have selected
  those elements for which it can make sense to write user style sheet rules,
  in my opionion.
%div
  This is a
  %code div
  element. Authors may use such elements instead
  of paragraph markup for various reasons. (End of
  = succeed ".)" do
    %code div
%blockquote
  %p
    This is a block quotation containing a single
    paragraph. Well, not quite, since this is not
    %em really
    quoted text, but I hope you understand the point. After all, this
    page does not use HTML markup very normally anyway.
%p
  The following contains address information about the author, in an
  %code address
  element.
%address
  %a{:href => "../personal.html", :hreflang => "en", :lang => "fi"}> Jukka Korpela
  ,
  %a{:href => "mailto:jkorpela@cs.tut.fi"}
    jkorpela@cs.tut.fi
%h2 Lists
%p
  This is a paragraph before an
  %strong unnumbered
  list (
  %code> ul
  ). Note that
  the spacing between a paragraph and a list before or after that is hard
  to tune in a user style sheet. You can't guess which paragraphs are
  logically related to a list, e.g. as a "list header".
%ul
  %li
    One.
    %li
      Two.
      %li
        Three. Well, probably this list item should be longer. Note that
        for short items lists look better if they are compactly presented,
        whereas for long items, it would be better to have more vertical spacing between items.
        %li
          Four. This is the last item in this list.
          Let us terminate the list now without making any more fuss about it.
%p
  The following is a
  %code menu
  list:
%menu
  %li
    One.
    %li
      Two.
      %li
        Three. Well, probably this list item should be longer so that it will
        probably wrap to the next line in rendering.
%p
  The following is a
  %code dir
  list:
%dir
  %li
    One.
    %li
      Two.
      %li
        Three. Well, probably this list item should be longer so that it will
        probably wrap to the next line in rendering.
%p
  This is a paragraph before a
  %strong numbered
  list (
  %code> ol
  ). Note that
  the spacing between a paragraph and a list before or after that is hard
  to tune in a user style sheet. You can't guess which paragraphs are
  logically related to a list, e.g. as a "list header".
%ol
  %li
    One.
    %li
      Two.
      %li
        Three. Well, probably this list item should be longer. Note that if
        items are short, lists look better if they are compactly presented,
        whereas for long items, it would be better to have more vertical spacing between items.
        %li
          Four. This is the last item in this list.
          Let us terminate the list now without making any more fuss about it.
%p
  This is a paragraph before a
  %strong definition
  list (
  %code> dl
  ).
  In principle, such a list should consist of
  %em terms
  and associated
  definitions.
  But many authors use
  %code dl
  elements for fancy "layout" things. Usually the
  effect is not
  %em too
  bad, if you design user style sheet rules for
  %code dl
  which are suitable
  for real definition lists.
  %dl
    %dt
      recursion
      %dd
        see recursion
        %dt
          recursion, indirect
          %dd
            see indirect recursion
            %dt
              indirect recursion
              %dd
                see recursion, indirect
                %dt
                  term
                  %dd
                    a word or other expression taken into specific use in
                    a well-defined meaning, which is often defined rather rigorously, even
                    formally, and may differ quite a lot from an everyday meaning
  %h2 Text-level markup
  %ul
    %li
      %abbr{:title => "Cascading Style Sheets"} CSS
      (an abbreviation;
      %code abbr
      markup used)
      %li
        %acronym{:title => "radio detecting and ranging"} radar
        (an acronym;
        %code acronym
        markup used)
        %li
          %b bolded
          (
          %code b
          markup used - just bolding with unspecified
          semantics)
          %li
            %big big thing
            (
            %code big
            markup used)
            %li
              %font{:size => "6"} large size
              (
              %code font size=6
              markup used)
              %li
                %font{:face => "Courier"} Courier font
                (
                %code font face=Courier
                markup used)
                %li
                  %font{:color => "red"} red text
                  (
                  %code font color=red
                  markup used)
                  %li
                    %cite Origin of Species
                    (a book title;
                    %code cite
                    markup used)
                    %li
                      %code a[i] = b[i] + c[i);
                      (computer code;
                      %code code
                      markup used)
                      %li
                        here we have some
                        %del deleted
                        text (
                        %code del
                        markup used)
                        %li
                          an
                          %dfn octet
                          is an entity consisting of eight bits
                          (
                          %code dfn
                          markup used for the term being defined)
                          %li
                            this is
                            %em very
                            simple (
                            %code em
                            markup used for emphasizing
                            a word)
                            %li
                              %i{:lang => "la"} Homo sapiens
                              (should appear in italics;
                              %code i
                              markup used)
                              %li
                                here we have some
                                %ins inserted
                                text (
                                %code ins
                                markup used)
                                %li
                                  type
                                  %kbd yes
                                  when prompted for an answer (
                                  %code kbd
                                  markup
                                  used for text indicating keyboard input)
                                  %li
                                    %q Hello!
                                    (
                                    %code q
                                    markup used for quotation)
                                    %li
                                      He said:
                                      %q
                                        She said
                                        %q Hello!
                                      (a quotation inside a quotation)
                                      %li
                                        you may get the message
                                        %samp Core dumped
                                        at times
                                        (
                                        %code samp
                                        markup used for sample output)
                                        %li
                                          %small this is not that important
                                          (
                                          %code small
                                          markup used)
                                          %li
                                            %strike overstruck
                                            (
                                            %code strike
                                            markup used; note:
                                            %code s
                                            is a nonstandard synonym for
                                            = succeed ")" do
                                              %code strike
                                            %li
                                              %strong this is highlighted text
                                              (
                                              %code strong
                                              markup used)
                                              %li
                                                In order to test how subscripts and superscripts (
                                                %code sub
                                                and
                                                %code sup
                                                markup) work inside running text, we need some
                                                dummy text around constructs like x
                                                %sub 1
                                                and H
                                                %sub> 2
                                                O
                                                (where subscripts occur). So here is some fill so that
                                                you will (hopefully) see whether and how badly the subscripts
                                                and superscripts mess up vertical spacing between lines.
                                                Now superscripts: M
                                                %sup> lle
                                                , 1
                                                %sup> st
                                                , and then some
                                                mathematical notations: e
                                                %sup> x
                                                , sin
                                                %sup 2
                                                = succeed "," do
                                                  %i x
                                                and some nested superscripts (exponents) too:
                                                e
                                                %sup
                                                  x
                                                  %sup 2
                                                and f(x)
                                                %sup
                                                  g(x)
                                                  %sup a+b+c
                                                (where 2 and a+b+c should appear as exponents of exponents).
                                                %li
                                                  %tt text in monospace font
                                                  (
                                                  %code tt
                                                  markup used)
                                                  %li
                                                    %u underlined
                                                    text (
                                                    %code u
                                                    markup used)
                                                    %li
                                                      the command
                                                      %code cat
                                                      %var filename
                                                      displays the
                                                      file specified by the
                                                      %var filename
                                                      (
                                                      %code var
                                                      markup
                                                      used to indicate a word as a variable).
  %p
    Some of the elements tested above are typically displayed in a monospace
    font, often using the
    %em same
    presentation for all of them. This
    tests whether that is the case on your browser:
  %ul
    %li
      %code This is sample text inside code markup
      %li
        %kbd This is sample text inside kbd markup
        %li
          %samp This is sample text inside samp markup
          %li
            %tt This is sample text inside tt markup
  %h2 Links
  %ul
    %li
      %a{:href => "../index.html"} main page
      %li
        %a{:href => "http://www.unicode.org/versions/Unicode4.0.0/ch06.pdf", :title => "Writing Systems and Punctuation", :type => "application/pdf"} Unicode Standard, chapter 6
  %p
    This is a text paragraph that contains some
    inline links. Generally, inline links (as opposite to e.g. links
    lists) are problematic
    from the
    %a{:href => "http://www.useit.com"} usability
    perspective,
    but they may have use as
    “incidental”, less relevant links. See the document
    = succeed "." do
      %cite
        %a{:href => "links.html"} Links Want To Be Links
  %h2 Forms
  %form{:action => "http://www.cs.tut.fi/cgi-bin/run/~jkorpela/echo.cgi"}
    %div
      %input{:name => "hidden field", :type => "hidden", :value => "42"}
        This is a form containing various fields (with some initial
        values (defaults) set, so that you can see how input text looks
        like without actually typing it):
    %div
      %label{:for => "but"}
        Button:
        %button#but{:name => "foo", :type => "submit", :value => "bar"}
          A cool
          %br button
    %div
      %label{:for => "f0"}
        Reset button:
        %input#f0{:name => "reset", :type => "reset", :value => "Reset"}/
    %div
      %label{:for => "f1"}
        Single-line text input field:
        %input#f1{:name => "text", :size => "20", :value => "Default text."}/
    %div
      %label{:for => "f2"} Multi-line text input field (textarea):
      %br
        %textarea#f2{:cols => "20", :name => "textarea", :rows => "2"}
          :preserve
            
            Default text.
    %div
      The following two radio buttons are inside
      a
      %code fieldset
      element with a
      = succeed ":" do
        %code legend
    %fieldset
      %legend Legend
      %div
        %label{:for => "f3"}
          %input#f3{:name => "radio", :type => "radio", :value => "1"} Radio button 1
      %div
        %label{:for => "f4"}
          %input#f4{:checked => "", :name => "radio", :type => "radio", :value => "2"} Radio button 2 (initially checked)
    %fieldset
      %legend Check those that apply
      %div
        %label{:for => "f5"}
          %input#f5{:name => "checkbox", :type => "checkbox"} Checkbox 1
      %div
        %label{:for => "f6"}
          %input#f6{:checked => "", :name => "checkbox2", :type => "checkbox"} Checkbox 2 (initially checked)
    %div
      %label{:for => "f10"}
        A
        %code select
        element with
        %code size="1"
        (dropdown box):
        %select#f10{:name => "select1", :size => "1"}
          %option
            one
            %option{:selected => ""}
              two (default)
              %option
                three
    %div
      %label{:for => "f11"}
        A
        %code select
        element with
        %code size="3"
        (listbox):
      %br
        %select#f11{:name => "select2", :size => "3"}
          %option
            one
            %option{:selected => ""}
              two (default)
              %option
                three
    %div
      %label{:for => "f99"}
        Submit button:
        %input#f99{:name => "submit", :type => "submit", :value => "Just a test"}/
  %h2 Tables
  %p
    The following table has a caption. The first row and the first column
    contain table header cells (
    %code th
    elements) only; other cells
    are data cells (
    %code td
    elements), with
    %code align="right"
    attributes:
  %TABLE{:summary => "Each row names a Nordic country and specifies its total area and land area, in square kilometers"}
    %CAPTION Sample table: Areas of the Nordic countries, in sq km
    %TR
      %th{:scope => "col"} Country
      %th{:scope => "col"}
        Total area
        %th{:scope => "col"}
          Land area
          %TR
            %th{:scope => "row"}
              Denmark
              %TD{:ALIGN => "RIGHT"} 43,070
              %TD{:ALIGN => "RIGHT"} 42,370
          %TR
            %th{:scope => "row"}
              Finland
              %TD{:ALIGN => "RIGHT"} 337,030
              %TD{:ALIGN => "RIGHT"} 305,470
          %TR
            %th{:scope => "row"}
              Iceland
              %TD{:ALIGN => "RIGHT"} 103,000
              %TD{:ALIGN => "RIGHT"} 100,250
          %TR
            %th{:scope => "row"}
              Norway
              %TD{:ALIGN => "RIGHT"} 324,220
              %TD{:ALIGN => "RIGHT"} 307,860
          %TR
            %th{:scope => "row"}
              Sweden
              %TD{:ALIGN => "RIGHT"} 449,964
              %TD{:ALIGN => "RIGHT"} 410,928
  %HR{:TITLE => "Information about this document"}
    %address
      %a{:href => "../personal.html", :hreflang => "en", :lang => "fi"} Jukka Korpela
    %div
      %A{:HREF => "../iso8601.html", :TITLE => "ISO 8601, the date and time representation standard"}
        Date
      of creation: 2000-09-15.
      Last update: 2012-02-16.
